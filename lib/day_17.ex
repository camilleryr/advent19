defmodule Day17 do
  def solve_part_1(input) do
    input
    |> Intcode.parse()
    |> Intcode.new()
    |> Intcode.run_program()
    |> Intcode.get_output(:all)
    |> build_map()
    |> find_intersections()
    |> Enum.map(&to_alignment_params/1)
    |> Enum.sum()
  end

  def solve_part_2(input) do
    input
    |> Intcode.parse()
    |> Intcode.new()
    |> Intcode.update_memory(0, 2)
    |> Intcode.run_program()
    |> Intcode.clear_output()
    |> input("A,B,B,C,C,A,A,B,B,C")
    |> input("L,12,R,4,R,4")
    |> input("R,12,R,4,L,12")
    |> input("R,12,R,4,L,6,L,8,L,8")
    |> input("n")
    |> Intcode.run_program()
    |> Intcode.get_output()
  end

  def to_alignment_params({x, y}), do: x * y

  def build_map(output) do
    output
    |> Enum.reverse()
    |> Enum.reduce({%{}, {0, 0}}, fn v, {acc, {x, y} = p} ->
      case v do
        10 -> {acc, {0, y + 1}}
        46 -> {acc, {x + 1, y}}
        _ -> {Map.put(acc, p, v), {x + 1, y}}
      end
    end)
    |> elem(0)
  end

  def find_intersections(map) do
    map
    |> Enum.filter(fn {coord, _} -> coord |> neighbors() |> Enum.all?(&Map.get(map, &1)) end)
    |> Enum.map(&elem(&1, 0))
  end

  def neighbors({x, y}), do: [{x + 1, y}, {x - 1, y}, {x, y + 1}, {x, y - 1}]

  def input(intcode, command) do
    command
    |> String.codepoints()
    |> Enum.map(fn <<v::utf8>> -> v end)
    |> Enum.concat([10])
    |> Enum.reduce(intcode, fn inp, int ->
      int
      |> Intcode.put_input(inp)
      |> Intcode.run_program()
    end)
  end
end

# ['........................#############......................', '\n',
#  '........................#...........#......................', '\n',
#  '........................#...........#......................', '\n',
#  '........................#...........#......................', '\n',
#  '........................#...........#############..........', '\n',
#  '........................#.......................#..........', '\n',
#  '........................#.......................#..........', '\n',
#  '........................#.......................#..........', '\n',
#  '........................#.......................#..........', '\n',
#  '........................#.......................#..........', '\n',
#  '........................#.......................#..........', '\n',
#  '........................#.......................#..........', '\n',
#  '....................#####.......................#..........', '\n',
#  '....................#...........................#..........', '\n',
#  '....................#.........................#####.#......', '\n',
#  '....................#.........................#.#.#.#......', '\n',
#  '........#####.....#########.................#####.#.#......', '\n',
#  '........#...#.....#.#.....#.................#.#...#.#......', '\n',
#  '........#...#.....#.#.....#.................#.############^', '\n',
#  '........#...#.....#.#.....#.................#.....#.#......', '\n',
#  '#######.#...#############.#.................#.....#.#......', '\n',
#  '#.....#.#.........#.#...#.#.................#.....#.#......', '\n',
#  '#.....#.#.........#.#.#####.................#########......', '\n',
#  '#.....#.#.........#.#.#.#.........................#........', '\n',
#  '#.....#############.#####.........................#........', '\n',
#  '#.......#.............#...........................#........', '\n',
#  '#.......#.............#.......................#####........', '\n',
#  '#.......#.............#.......................#............', '\n',
#  '#########.............#.......................#............', '\n',
#  '......................#.......................#............', '\n',
#  '......................#.......................#............', '\n',
#  '......................#.......................#............', '\n',
#  '......................#.......................#............', '\n',
#  '......................#.......................#............', '\n',
#  '......................#############...........#............', '\n',
#  '..................................#...........#............', '\n',
#  '..................................#...........#............', '\n',
#  '..................................#...........#............', '\n',
#  '..................................#############............',

#   A - L12 R4 R4
#   B - R12 R4 L12
#   B - R12 R4 L12
#   C - R12 R4 L6 L8 L8
#   C - R12 R4 L6 L8 L8
#   A - L12 R4 R4
#   A - L12 R4 R4
#   B - R12 R4 L12
#   B - R12 R4 L12
#   C - R12 R4 L6 L8 L8
